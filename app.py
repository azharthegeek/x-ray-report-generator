# Q&A Chatbot
#from langchain.llms import OpenAI

from dotenv import load_dotenv

load_dotenv()  # take environment variables from .env.

import streamlit as st
import os
import pathlib
import textwrap
from PIL import Image

import google.generativeai as genai

os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

## Function to load OpenAI model and get responses

def get_gemini_response(image, prompt):
    model = genai.GenerativeModel('gemini-pro-vision')
    response = model.generate_content([image[0], prompt])  # Pass only image and prompt
    return response.text

def input_image_setup(uploaded_file):
    # Check if a file has been uploaded
    if uploaded_file is not None:
        # Read the file into bytes
        bytes_data = uploaded_file.getvalue()

        image_parts = [
            {
                "mime_type": uploaded_file.type,   # Get the mime type of the uploaded file
                "data": bytes_data
            }
        ]
        return image_parts
    else:
        raise FileNotFoundError("No file uploaded")

## Initialize our streamlit app

st.set_page_config(page_title="TechShoor Mediscan 2")

# Add custom background CSS
page_bg_img = f"""
<style>
[data-testid="stAppViewContainer"] > .main {{
  background-color: #b00734; /* Change background color to maroon */
}}

[data-testid="stHeader"] {{
  background: rgba(0,0,0,0);
  text-align: center; /* Center the title */
}}

[data-testid="stToolbar"] {{
  right: 2rem;
}}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)

st.markdown("<h1 style='text-align: center;'>TechShoor Mediscan 2</h1>", unsafe_allow_html=True)

uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
image = ""
if uploaded_file is not None:
    image = Image.open(uploaded_file)
    resized_image = image.resize((500, 500)) 
    st.image(resized_image, caption="Uploaded Image.", use_column_width=False) 

submit = st.button("Tell me about the image")

input_prompt = """You are an expert in understanding medical images. Your task is to generate a comprehensive report based on the input X-ray image. The report should cover the following aspects:

Fracture Detection: Analyze the X-ray image to determine if it shows evidence of a fracture or if it is fracture-free.
Body Part Identification: Identify the specific body part represented in the X-ray image.
Fracture Analysis (if applicable): If a fracture is detected, provide a detailed analysis, including:
    - Type of fracture (e.g., hairline, displaced, comminuted)
    - Severity and extent of the fracture
    - Recommendations for treatment and recovery
Confidence Score: Provide a confidence score for your fracture detection and analysis.

Your expertise and detailed analysis will be crucial in generating accurate reports. Please ensure that your findings are thorough and supported by evidence from the X-ray image."""

## If ask button is clicked

if submit:
    image_data = input_image_setup(uploaded_file)
    response = get_gemini_response(image_data, input_prompt)  # Pass only image data and prompt
    st.subheader("The Response is")
    st.write(response)
st.markdown("<p style='text-align: center; font-size: small;'>Disclaimer: The information provided by this application is generated by AI and should not be solely relied upon for medical diagnosis or treatment. Always consult with a qualified healthcare professional for any medical concerns.</p>", unsafe_allow_html=True)